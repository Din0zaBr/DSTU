# Функция для проверки простоты числа
def is_prime(num):
    if num % 2 == 0:
        return num == 2
    d = 3
    while d * d <= num and num % d != 0:
        d += 2
    return d * d > num


"""
Вычисляет расширенный наибольший общий делитель (XGCD) двух целых чисел `a` и `b`.
Расширенный алгоритм Евклида для нахождения НОД и коэффициентов Безу
    
    Параметры:
        a (int): Первое целое число.
        b (int): Второе целое число.
        
    Возвращает кортеж из трех целых чисел:
        - Наибольший общий делитель `a` и `b`.
        - Коэффициент `x` числа `a` в уравнении `ax + by = gcd(a, b)`.
        - Коэффициент `y` числа `b` в уравнении `ax + by = gcd(a, b)`.
"""


def xgcd(a: int, b: int) -> tuple[int, int, int]:
    x0, x1, y0, y1 = 0, 1, 1, 0
    while a != 0:
        (q, a), b = divmod(b, a), a
        y0, y1 = y1, y0 - q * y1
        x0, x1 = x1, x0 - q * x1
    return b, x0, y0


# Ввод и проверка простых чисел p и q
p = int(input("Введите простое число: p = "))  # Пример: 5
while not is_prime(p):
    print(f"Число {p} не простое")
    p = int(input("Введите простое число: p = "))

q = int(input("Введите простое число: q = "))  # Пример: 11
while not is_prime(q):
    print(f"Число {q} не простое")
    q = int(input("Введите простое число: q = "))

# Вычисление n и функции Эйлера от n
n = p * q
phi = (p - 1) * (q - 1)

# Ввод и проверка простоты числа e
e = int(input("Введите простое число: e = "))  # Пример: 65537
while not is_prime(e):
    print(f"Число {e} не простое")
    e = int(input("Введите простое число: e = "))

# Вычисление закрытого ключа d
# Мы хотим получить только x (коэффициент Безу для e)
_, d, _ = xgcd(e, phi)
d %= phi  # Убедиться, что d положительно

# Ввод сообщения для шифрования
message = int(input("Введите число, которое будет зашифровано: "))  # Пример: 54
while message >= n:
    print(f"Введённое число {message} не может быть больше или равняться {n}")
    message = int(input("Введите число, которое будет зашифровано: "))

# Шифрование сообщения
encrypt_msg = pow(message, e, n)

# Дешифрование сообщения
decrypted_msg = pow(encrypt_msg, d, n)

# Вывод результатов
print("Исходное сообщение:", message)
print("Зашифрованное сообщение:", encrypt_msg)
print("Расшифрованное сообщение:", decrypted_msg)
