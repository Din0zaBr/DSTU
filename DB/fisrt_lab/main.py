"""
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å GUI –Ω–∞ Flet –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–ø–æ—Ä–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–í–ï–†–°–ò–Ø –°–û –°–•–ï–ú–û–ô temporal_lab
"""

import flet as ft
import psycopg2
from datetime import datetime
from typing import List, Dict

class TemporalDatabase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–ø–æ—Ä–∞–ª—å–Ω–æ–π –ë–î"""

    def __init__(self, dbname: str = 'postgres', user: str = 'postgres',
                 password: str = 'superuser', host: str = 'localhost', port: str = '5432'):
        self.connection_params = {
            'dbname': dbname,
            'user': user,
            'password': password,
            'host': host,
            'port': port
        }
        self.conn = None
        self.cursor = None

    def connect(self):
        try:
            self.conn = psycopg2.connect(**self.connection_params)
            self.cursor = self.conn.cursor()
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.cursor.execute("SET search_path TO temporal_lab, public;")
            return True, f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (—Å—Ö–µ–º–∞: temporal_lab)"
        except Exception as e:
            return False, f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"

    def disconnect(self):
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()

    def get_current_state(self):
        query = "SELECT * FROM temporal_lab.v_current_state;"
        try:
            self.cursor.execute(query)
            columns = [desc[0] for desc in self.cursor.description]
            results = [dict(zip(columns, row)) for row in self.cursor.fetchall()]
            return results, "‚úì –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã"
        except Exception as e:
            return [], f"‚úó –û—à–∏–±–∫–∞: {e}"

    def get_state_at_time(self, timestamp: str):
        query = "SELECT * FROM temporal_lab.get_state_at_time(%s);"
        try:
            self.cursor.execute(query, (timestamp,))
            columns = [desc[0] for desc in self.cursor.description]
            results = [dict(zip(columns, row)) for row in self.cursor.fetchall()]
            return results, f"‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ {timestamp}"
        except Exception as e:
            return [], f"‚úó –û—à–∏–±–∫–∞: {e}"

    def get_history(self, table_name: str, record_id: int):
        query = f"SELECT * FROM temporal_lab.{table_name} WHERE id = %s ORDER BY time_create;"
        try:
            self.cursor.execute(query, (record_id,))
            columns = [desc[0] for desc in self.cursor.description]
            results = [dict(zip(columns, row)) for row in self.cursor.fetchall()]
            return results, f"‚úì –ò—Å—Ç–æ—Ä–∏—è {table_name}.{record_id}"
        except Exception as e:
            return [], f"‚úó –û—à–∏–±–∫–∞: {e}"

    def get_table_data(self, table_name: str):
        query = f"""
            SELECT *, 
                CASE 
                    WHEN time_dead IS NULL THEN 'ACTIVE'
                    ELSE 'ARCHIVED'
                END as status
            FROM temporal_lab.{table_name}
            ORDER BY id, time_create DESC;
        """
        try:
            self.cursor.execute(query)
            columns = [desc[0] for desc in self.cursor.description]
            results = [dict(zip(columns, row)) for row in self.cursor.fetchall()]
            return results, f"‚úì –î–∞–Ω–Ω—ã–µ –∏–∑ {table_name}"
        except Exception as e:
            return [], f"‚úó –û—à–∏–±–∫–∞: {e}"

    def insert_student(self, student_id: int, name: str, surname: str, birth_date: str, group_id: int):
        query = "INSERT INTO temporal_lab.students (id, name, surname, birth_date, group_id) VALUES (%s, %s, %s, %s, %s);"
        try:
            self.cursor.execute(query, (student_id, name, surname, birth_date, group_id))
            self.conn.commit()
            return True, f"‚úì –°—Ç—É–¥–µ–Ω—Ç {name} {surname} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω"
        except Exception as e:
            self.conn.rollback()
            return False, f"‚úó –û—à–∏–±–∫–∞: {e}"

    def insert_group(self, group_id: int, group_name: str, faculty: str, course: int):
        query = "INSERT INTO groups (id, group_name, faculty, course) VALUES (%s, %s, %s, %s);"
        try:
            self.cursor.execute(query, (group_id, group_name, faculty, course))
            self.conn.commit()
            return True, f"‚úì –ì—Ä—É–ø–ø–∞ {group_name} –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        except Exception as e:
            self.conn.rollback()
            return False, f"‚úó –û—à–∏–±–∫–∞: {e}"

    def insert_teacher(self, teacher_id: int, name: str, surname: str, department: str, position: str):
        query = "INSERT INTO temporal_lab.teachers (id, name, surname, department, job_position) VALUES (%s, %s, %s, %s, %s);"
        try:
            self.cursor.execute(query, (teacher_id, name, surname, department, position))
            self.conn.commit()
            return True, f"‚úì –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {name} {surname} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω"
        except Exception as e:
            self.conn.rollback()
            return False, f"‚úó –û—à–∏–±–∫–∞: {e}"

    def insert_course(self, course_id: int, course_name: str, teacher_id: int, group_id: int, semester: int):
        query = "INSERT INTO temporal_lab.courses (id, course_name, teacher_id, group_id, semester) VALUES (%s, %s, %s, %s, %s);"
        try:
            self.cursor.execute(query, (course_id, course_name, teacher_id, group_id, semester))
            self.conn.commit()
            return True, f"‚úì –ö—É—Ä—Å {course_name} –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω"
        except Exception as e:
            self.conn.rollback()
            return False, f"‚úó –û—à–∏–±–∫–∞: {e}"


class TemporalApp:
    def __init__(self, page: ft.Page):
        self.page = page
        self.db = None
        self.setup_page()
        self.create_ui()

    def setup_page(self):
        self.page.title = "–¢–µ–º–ø–æ—Ä–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö"
        self.page.theme_mode = ft.ThemeMode.LIGHT
        self.page.padding = 20
        self.page.window_width = 1400
        self.page.window_height = 900
        self.page.scroll = "adaptive"

    def create_ui(self):
        header = ft.Container(
            content=ft.Column([
                ft.Text("üóÑÔ∏è –¢–µ–º–ø–æ—Ä–∞–ª—å–Ω–∞—è –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö", size=32, weight=ft.FontWeight.BOLD),
                ft.Text("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Å—Ö–µ–º–∞: temporal_lab)", size=16),
            ]),
            padding=20,
            bgcolor="#E3F2FD",
            border_radius=10,
            margin=ft.margin.only(bottom=20)
        )

        self.db_host = ft.TextField(label="–•–æ—Å—Ç", value="localhost", width=150)
        self.db_port = ft.TextField(label="–ü–æ—Ä—Ç", value="5432", width=100)
        self.db_name = ft.TextField(label="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", value="temporal_lab", width=150)
        self.db_user = ft.TextField(label="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value="postgres", width=150)
        self.db_password = ft.TextField(label="–ü–∞—Ä–æ–ª—å", password=True, can_reveal_password=True, width=200)

        self.connect_btn = ft.ElevatedButton(
            "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", icon=ft.Icons.POWER, on_click=self.connect_to_db,
            bgcolor="#4CAF50", color="white"
        )

        self.disconnect_btn = ft.ElevatedButton(
            "–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è", icon=ft.Icons.POWER_OFF, on_click=self.disconnect_from_db,
            disabled=True, bgcolor="#F44336", color="white"
        )

        self.connection_status = ft.Text("‚ö™ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")

        connection_form = ft.Container(
            content=ft.Column([
                ft.Text("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å—Ö–µ–º–∞: temporal_lab)", size=20, weight=ft.FontWeight.BOLD),
                ft.Row([self.db_host, self.db_port, self.db_name, self.db_user, self.db_password], wrap=True),
                ft.Row([self.connect_btn, self.disconnect_btn, self.connection_status]),
            ]),
            padding=20,
            border=ft.border.all(2, "#BBDEFB"),
            border_radius=10,
            margin=ft.margin.only(bottom=20)
        )

        self.tabs = ft.Tabs(
            selected_index=0,
            animation_duration=300,
            tabs=[
                ft.Tab(text="üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", content=self.create_current_state_tab()),
                ft.Tab(text="üïí –ò—Å—Ç–æ—Ä–∏—è", content=self.create_temporal_tab()),
                ft.Tab(text="üë• –°—Ç—É–¥–µ–Ω—Ç—ã", content=self.create_students_tab()),
                ft.Tab(text="üìö –ì—Ä—É–ø–ø—ã", content=self.create_groups_tab()),
                ft.Tab(text="üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", content=self.create_teachers_tab()),
                ft.Tab(text="üìñ –ö—É—Ä—Å—ã", content=self.create_courses_tab()),
                ft.Tab(text="üîê –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", content=self.create_permissions_tab()),
            ],
            expand=1,
        )

        self.page.add(header, connection_form, self.tabs)

    def create_current_state_tab(self):
        self.current_state_container = ft.Column(scroll="auto")
        self.current_state_info = ft.Text("–ù–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å' –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

        refresh_btn = ft.ElevatedButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", on_click=self.load_current_state)

        return ft.Container(
            content=ft.Column([
                ft.Row([refresh_btn, self.current_state_info]),
                ft.Container(
                    content=self.current_state_container,
                    border=ft.border.all(1, "#E0E0E0"),
                    border_radius=10,
                    padding=10,
                    height=600,
                )
            ]),
            padding=20,
        )

    def create_temporal_tab(self):
        self.temporal_date = ft.TextField(
            label="–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (YYYY-MM-DD HH:MM:SS)",
            value="2025-10-14 05:30:00",
            width=300
        )

        load_at_time_btn = ft.ElevatedButton("üìÖ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –¥–∞—Ç—É", on_click=self.load_state_at_time)

        self.history_table = ft.Dropdown(
            label="–¢–∞–±–ª–∏—Ü–∞",
            options=[
                ft.dropdown.Option("students"),
                ft.dropdown.Option("groups"),
                ft.dropdown.Option("teachers"),
                ft.dropdown.Option("courses"),
            ],
            value="students",
            width=200
        )

        self.history_id = ft.TextField(label="ID –∑–∞–ø–∏—Å–∏", value="1", width=150)
        load_history_btn = ft.ElevatedButton("üìú –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", on_click=self.load_history)

        self.temporal_result_container = ft.Column(scroll="auto")
        self.temporal_info = ft.Text("")

        return ft.Container(
            content=ft.Column([
                ft.Text("–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É", size=18, weight=ft.FontWeight.BOLD),
                ft.Row([self.temporal_date, load_at_time_btn]),
                ft.Divider(height=20),
                ft.Text("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø–∏—Å–∏", size=18, weight=ft.FontWeight.BOLD),
                ft.Row([self.history_table, self.history_id, load_history_btn]),
                self.temporal_info,
                ft.Container(
                    content=self.temporal_result_container,
                    border=ft.border.all(1, "#E0E0E0"),
                    border_radius=10,
                    padding=10,
                    height=500,
                )
            ]),
            padding=20,
        )

    def create_students_tab(self):
        self.student_id = ft.TextField(label="ID", width=100)
        self.student_name = ft.TextField(label="–ò–º—è", width=200)
        self.student_surname = ft.TextField(label="–§–∞–º–∏–ª–∏—è", width=200)
        self.student_birth_date = ft.TextField(label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD)", width=200)
        self.student_group_id = ft.TextField(label="ID –≥—Ä—É–ø–ø—ã", width=150)

        add_student_btn = ft.ElevatedButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å", on_click=self.add_student, bgcolor="#4CAF50", color="white"
        )
        load_students_btn = ft.ElevatedButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö", on_click=self.load_students)

        self.students_container = ft.Column(scroll="auto")
        self.students_info = ft.Text("")

        return ft.Container(
            content=ft.Column([
                ft.Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏", size=20, weight=ft.FontWeight.BOLD),
                ft.Row([
                    self.student_id, self.student_name, self.student_surname,
                    self.student_birth_date, self.student_group_id
                ], wrap=True),
                ft.Row([add_student_btn, load_students_btn]),
                self.students_info,
                ft.Container(
                    content=self.students_container,
                    border=ft.border.all(1, "#E0E0E0"),
                    border_radius=10,
                    padding=10,
                    height=450,
                )
            ]),
            padding=20,
        )

    def create_groups_tab(self):
        self.group_id = ft.TextField(label="ID", width=100)
        self.group_name = ft.TextField(label="–ù–∞–∑–≤–∞–Ω–∏–µ", width=200)
        self.group_faculty = ft.TextField(label="–§–∞–∫—É–ª—å—Ç–µ—Ç", width=300)
        self.group_course = ft.TextField(label="–ö—É—Ä—Å", width=100)

        add_group_btn = ft.ElevatedButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å", on_click=self.add_group, bgcolor="#4CAF50", color="white")
        load_groups_btn = ft.ElevatedButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ", on_click=self.load_groups)

        self.groups_container = ft.Column(scroll="auto")
        self.groups_info = ft.Text("")

        return ft.Container(
            content=ft.Column([
                ft.Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏", size=20, weight=ft.FontWeight.BOLD),
                ft.Row([self.group_id, self.group_name, self.group_faculty, self.group_course]),
                ft.Row([add_group_btn, load_groups_btn]),
                self.groups_info,
                ft.Container(content=self.groups_container, border=ft.border.all(1, "#E0E0E0"), border_radius=10, padding=10, height=450)
            ]),
            padding=20,
        )

    def create_teachers_tab(self):
        self.teacher_id = ft.TextField(label="ID", width=100)
        self.teacher_name = ft.TextField(label="–ò–º—è", width=200)
        self.teacher_surname = ft.TextField(label="–§–∞–º–∏–ª–∏—è", width=200)
        self.teacher_department = ft.TextField(label="–ö–∞—Ñ–µ–¥—Ä–∞", width=250)
        self.teacher_position = ft.TextField(label="–î–æ–ª–∂–Ω–æ—Å—Ç—å", width=200)

        add_teacher_btn = ft.ElevatedButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å", on_click=self.add_teacher, bgcolor="#4CAF50", color="white")
        load_teachers_btn = ft.ElevatedButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ—Ö", on_click=self.load_teachers)

        self.teachers_container = ft.Column(scroll="auto")
        self.teachers_info = ft.Text("")

        return ft.Container(
            content=ft.Column([
                ft.Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏", size=20, weight=ft.FontWeight.BOLD),
                ft.Row([self.teacher_id, self.teacher_name, self.teacher_surname, self.teacher_department, self.teacher_position], wrap=True),
                ft.Row([add_teacher_btn, load_teachers_btn]),
                self.teachers_info,
                ft.Container(content=self.teachers_container, border=ft.border.all(1, "#E0E0E0"), border_radius=10, padding=10, height=450)
            ]),
            padding=20,
        )

    def create_courses_tab(self):
        self.course_id = ft.TextField(label="ID", width=100)
        self.course_name = ft.TextField(label="–ù–∞–∑–≤–∞–Ω–∏–µ", width=300)
        self.course_teacher_id = ft.TextField(label="ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", width=150)
        self.course_group_id = ft.TextField(label="ID –≥—Ä—É–ø–ø—ã", width=150)
        self.course_semester = ft.TextField(label="–°–µ–º–µ—Å—Ç—Ä", width=100)

        add_course_btn = ft.ElevatedButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å/–û–±–Ω–æ–≤–∏—Ç—å", on_click=self.add_course, bgcolor="#4CAF50", color="white")
        load_courses_btn = ft.ElevatedButton("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ", on_click=self.load_courses)

        self.courses_container = ft.Column(scroll="auto")
        self.courses_info = ft.Text("")

        return ft.Container(
            content=ft.Column([
                ft.Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞–º–∏", size=20, weight=ft.FontWeight.BOLD),
                ft.Row([self.course_id, self.course_name, self.course_teacher_id, self.course_group_id, self.course_semester], wrap=True),
                ft.Row([add_course_btn, load_courses_btn]),
                self.courses_info,
                ft.Container(content=self.courses_container, border=ft.border.all(1, "#E0E0E0"), border_radius=10, padding=10, height=450)
            ]),
            padding=20,
        )

    def create_permissions_tab(self):
        return ft.Container(
            content=ft.Column([
                ft.Text("üîê –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", size=24, weight=ft.FontWeight.BOLD),
                ft.Divider(height=20),
                ft.Container(
                    content=ft.Column([
                        ft.Text("üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (postgres)", size=18, weight=ft.FontWeight.BOLD),
                        ft.Text("‚úì –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º –≤ —Å—Ö–µ–º–µ temporal_lab", color="#2E7D32"),
                        ft.Text("‚úì –ß—Ç–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö", color="#2E7D32"),
                    ]),
                    padding=20, bgcolor="#E8F5E9", border_radius=10, margin=ft.margin.only(bottom=10)
                ),
                ft.Container(
                    content=ft.Column([
                        ft.Text("üë§ –†–µ–¥–∞–∫—Ç–æ—Ä (editor_user / editor_password)", size=18, weight=ft.FontWeight.BOLD),
                        ft.Text("‚úì –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü", color="#1976D2"),
                        ft.Text("‚úì –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–∞–±–ª–∏—Ü—ã students", color="#1976D2"),
                    ]),
                    padding=20, bgcolor="#E3F2FD", border_radius=10, margin=ft.margin.only(bottom=10)
                ),
                ft.Container(
                    content=ft.Column([
                        ft.Text("üë§ –ß–∏—Ç–∞—Ç–µ–ª—å (reader_user / reader_password)", size=18, weight=ft.FontWeight.BOLD),
                        ft.Text("‚úì –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü", color="#F57C00"),
                        ft.Text("‚úó –õ—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω—ã", color="#C62828"),
                    ]),
                    padding=20, bgcolor="#FFF3E0", border_radius=10
                ),
            ], scroll="auto"),
            padding=20,
        )

    def connect_to_db(self, e):
        self.db = TemporalDatabase(
            self.db_name.value, self.db_user.value, self.db_password.value,
            self.db_host.value, self.db_port.value
        )
        success, message = self.db.connect()

        if success:
            self.connection_status.value = f"üü¢ {message}"
            self.connect_btn.disabled = True
            self.disconnect_btn.disabled = False
            self.show_snackbar("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å—Ö–µ–º–µ temporal_lab!", "#4CAF50")
        else:
            self.connection_status.value = f"üî¥ {message}"
            self.show_snackbar("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!", "#F44336")
        self.page.update()

    def disconnect_from_db(self, e):
        if self.db:
            self.db.disconnect()
        self.connection_status.value = "‚ö™ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
        self.connect_btn.disabled = False
        self.disconnect_btn.disabled = True
        self.show_snackbar("–û—Ç–∫–ª—é—á–µ–Ω–æ", "#2196F3")
        self.page.update()

    def load_current_state(self, e):
        if not self.check_connection():
            return
        results, message = self.db.get_current_state()
        self.current_state_info.value = message
        self.populate_container(self.current_state_container, results)
        self.page.update()

    def load_state_at_time(self, e):
        if not self.check_connection():
            return
        results, message = self.db.get_state_at_time(self.temporal_date.value)
        self.temporal_info.value = message
        self.populate_container(self.temporal_result_container, results)
        self.page.update()

    def load_history(self, e):
        if not self.check_connection():
            return
        try:
            record_id = int(self.history_id.value)
        except:
            self.show_snackbar("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID!", "#F44336")
            return
        results, message = self.db.get_history(self.history_table.value, record_id)
        self.temporal_info.value = message
        self.populate_container(self.temporal_result_container, results)
        self.page.update()

    def add_student(self, e):
        if not self.check_connection():
            return
        try:
            success, message = self.db.insert_student(
                int(self.student_id.value), self.student_name.value,
                self.student_surname.value, self.student_birth_date.value,
                int(self.student_group_id.value)
            )
            self.students_info.value = message
            if success:
                self.show_snackbar(message, "#4CAF50")
                self.clear_student_fields()
        except ValueError:
            self.show_snackbar("ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!", "#F44336")
        self.page.update()

    def load_students(self, e):
        if not self.check_connection():
            return
        results, message = self.db.get_table_data('students')
        self.students_info.value = message
        self.populate_container(self.students_container, results)
        self.page.update()

    def add_group(self, e):
        if not self.check_connection():
            return
        try:
            success, message = self.db.insert_group(
                int(self.group_id.value), self.group_name.value,
                self.group_faculty.value, int(self.group_course.value)
            )
            self.groups_info.value = message
            if success:
                self.show_snackbar(message, "#4CAF50")
                self.clear_group_fields()
        except ValueError:
            self.show_snackbar("ID –∏ –∫—É—Ä—Å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!", "#F44336")
        self.page.update()

    def load_groups(self, e):
        if not self.check_connection():
            return
        results, message = self.db.get_table_data('groups')
        self.groups_info.value = message
        self.populate_container(self.groups_container, results)
        self.page.update()

    def add_teacher(self, e):
        if not self.check_connection():
            return
        try:
            success, message = self.db.insert_teacher(
                int(self.teacher_id.value), self.teacher_name.value,
                self.teacher_surname.value, self.teacher_department.value,
                self.teacher_position.value
            )
            self.teachers_info.value = message
            if success:
                self.show_snackbar(message, "#4CAF50")
                self.clear_teacher_fields()
        except ValueError:
            self.show_snackbar("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!", "#F44336")
        self.page.update()

    def load_teachers(self, e):
        if not self.check_connection():
            return
        results, message = self.db.get_table_data('teachers')
        self.teachers_info.value = message
        self.populate_container(self.teachers_container, results)
        self.page.update()

    def add_course(self, e):
        if not self.check_connection():
            return
        try:
            success, message = self.db.insert_course(
                int(self.course_id.value), self.course_name.value,
                int(self.course_teacher_id.value), int(self.course_group_id.value),
                int(self.course_semester.value)
            )
            self.courses_info.value = message
            if success:
                self.show_snackbar(message, "#4CAF50")
                self.clear_course_fields()
        except ValueError:
            self.show_snackbar("ID –∏ —Å–µ–º–µ—Å—Ç—Ä –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!", "#F44336")
        self.page.update()

    def load_courses(self, e):
        if not self.check_connection():
            return
        results, message = self.db.get_table_data('courses')
        self.courses_info.value = message
        self.populate_container(self.courses_container, results)
        self.page.update()

    def populate_container(self, container: ft.Column, data: List[Dict]):
        container.controls.clear()

        if not data:
            container.controls.append(ft.Text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", color="#757575"))
            return

        columns = list(data[0].keys())
        table = ft.DataTable(
            columns=[ft.DataColumn(ft.Text(col, weight=ft.FontWeight.BOLD, size=11)) for col in columns],
            rows=[],
            border=ft.border.all(1, "#BDBDBD"),
            border_radius=10,
            heading_row_color="#E3F2FD",
        )

        for row_data in data:
            cells = []
            for col in columns:
                value = row_data[col]
                if value is None:
                    display_value, color = "NULL", "#9E9E9E"
                elif col == 'status':
                    display_value = str(value)
                    color = "#2E7D32" if value == 'ACTIVE' else "#C62828"
                elif isinstance(value, datetime):
                    display_value = value.strftime('%Y-%m-%d %H:%M:%S')
                    color = "#000000"
                else:
                    display_value, color = str(value), "#000000"
                cells.append(ft.DataCell(ft.Text(display_value, color=color, size=11)))
            table.rows.append(ft.DataRow(cells=cells))

        container.controls.append(table)

    def check_connection(self):
        if not self.db:
            self.show_snackbar("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –ë–î!", "#F44336")
            return False
        return True

    def show_snackbar(self, message: str, bgcolor: str):
        self.page.snack_bar = ft.SnackBar(content=ft.Text(message, color="white"), bgcolor=bgcolor)
        self.page.snack_bar.open = True
        self.page.update()

    def clear_student_fields(self):
        self.student_id.value = ""
        self.student_name.value = ""
        self.student_surname.value = ""
        self.student_birth_date.value = ""
        self.student_group_id.value = ""

    def clear_group_fields(self):
        self.group_id.value = ""
        self.group_name.value = ""
        self.group_faculty.value = ""
        self.group_course.value = ""

    def clear_teacher_fields(self):
        self.teacher_id.value = ""
        self.teacher_name.value = ""
        self.teacher_surname.value = ""
        self.teacher_department.value = ""
        self.teacher_position.value = ""

    def clear_course_fields(self):
        self.course_id.value = ""
        self.course_name.value = ""
        self.course_teacher_id.value = ""
        self.course_group_id.value = ""
        self.course_semester.value = ""


def main(page: ft.Page):
    TemporalApp(page)

if __name__ == "__main__":
    ft.app(target=main)